- var host = '[HOST]'

mixin Nav()
    nav#nav.hidden-sm.hidden-xs.nav
        each resourceGroup in api.resourceGroups
            if (resourceGroup.name.search('Hidden') == -1)
                .list-group
                    a.list-group-item.heading.collapsed(data-toggle="#{(collapsible ? 'collapse' : '')}", data-target="##{slug(resourceGroup.name)}-menu", href="##{slug(resourceGroup.name)}")
                        if collapsible && resourceGroup.resources.length
                            span.toggle.pull-right
                                span.open.fa.fa-angle-down
                                span.closed.fa.fa-angle-right
                        = resourceGroup.name || 'Resource Group'
                    div(class=collapsible ? 'collapse' : '', id="#{slug(resourceGroup.name)}-menu")
                        each resource in resourceGroup.resources
                            if !condenseNav || (resource.actions.length != 1)
                                a.list-group-item(href="##{slug(resourceGroup.name)}-#{slug(resource.name)}")
                                    = resource.name || 'Resource'
                                each action in resource.actions
                                    a.list-group-item(href="##slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")
                                        +Icon(action.method)
                                        span.indent
                                            = action.name || action.method + ' ' + resource.uriTemplate
                            else
                                a.list-group-item(href="##{slug(resourceGroup.name)}-#{slug(resource.name)}")
                                    - var action = resource.actions[0]
                                    +Icon(action.method)
                                    = resource.name || action.name || action.method + ' ' + resource.uriTemplate

        each meta in api.metadata
            if meta.name == 'HOST'
                p.host
                    - host = meta.value
                    a(href=meta.value)= meta.value


mixin Parameters(params)
    table.table.table-striped.table-hover.table-bordered.table-auto-width
        thead
            tr
                th Name
                th Type
                th Required
                th Description
                th Default
                th Example
                th Values
        tbody
            each param in params
                tr
                    td.name= param.name
                    td.type= param.type
                    td.required
                        if param.required
                            i.fa.fa-check
                    td.description!= markdown(param.description)
                    td.default
                        if param.default
                            = param.default
                    td.example
                        if param.example
                            = param.example
                    td.values
                        if param.values.length
                            ul.list-unstyled
                                each value in param.values
                                    li= value.value

- var attributeExists = function (properties, name) {
-    for (var i in properties)
-       if ((properties[i].hasOwnProperty(name) && properties[i][name].length) || properties[i].type == 'object' || properties[i].type == 'array')
-           return true;
-   return false;
- }

mixin ItemSubType (baseId, item)
    - subId = baseId + item.itemType.replace(/\s+/g, '')
    a.schema-type-link(href='#' + subId)= item.itemType

mixin ItemSubTypes (baseId, items)
    if items.itemType
        +ItemSubType(baseId, items)
    else
        each item, i in items
            if item.itemType
                +ItemSubType(baseId, item)
            else
                = item.itemType
            if (i < items.length - 1)
                = ' | '

mixin ItemType (baseId, item)
    if item.type == 'array' && item.itemType
        = 'array [ '
        if item.items
            if item.items.itemType
                +ItemSubType(baseId, item.items)
            else if item.items.properties
                +ItemSubTypes(baseId, item.items.properties)
            else
                = item.items.type
        else
            +ItemSubType(baseId, item)
        = ' ]'
    else if item.type == 'object' && item.itemType
        = 'object ( '
        if item.items
            if item.items.itemType
                +ItemSubType(baseId, item.items)
            else if item.items.properties
                +ItemSubTypes(baseId, item.items.properties)
        else
            +ItemSubType(baseId, item)
        = ' )'
    else
        = item.type

mixin SchemaTable (schema, baseId)
    thead
        tr
            th Name
            th Type
            th.text-center Required
            th.text-center Null
            th Description
            th Default
            th Example
            th Values
    tbody
        each item in schema
            tr
                td.name= item.name
                td.type
                    +ItemType(baseId, item)
                td.required
                    if item.required
                        i.fa.fa-check
                td.null
                    if item.nullable
                        i.fa.fa-check
                td.description= item.description
                td.default= item.default
                td.example= item.example
                td.values
                    if item.type == 'enum' && item.properties
                        ul.list-unstyled
                            each value in item.properties
                                li= value.name

mixin SchemaPopupTable (schema, baseId)
    div.schema-popup(id=baseId)
        table.table.table-condensed.table-schema
            if schema.properties
                +SchemaPopupSubTable(schema.properties, baseId)
            else if schema.items.properties
                +SchemaPopupSubTable(schema.items.properties, baseId)

mixin SchemaPopupSubTable (schema, baseId)
    thead
        tr
            th Name
            th Type
            th.text-center Required
            th.text-center Null
            th Description
    tbody
        each item in schema
            tr
                td.name= item.name
                td.type
                    +ItemType(baseId, item)
                td.required
                    if item.required
                        i.fa.fa-check
                td.null
                    if item.nullable
                        i.fa.fa-check
                td.description= item.description

mixin SchemaSubTable (schema, baseId)
    if schema.properties
        +SchemaTable(schema.properties, baseId)
    else if schema.items.properties
        +SchemaTable(schema.items.properties, baseId)

mixin RequestResponse(title, request, resourceGroup, resource, action)
    - var id = hash(resourceGroup.name.toString() + resource.name.toString() + action.name.toString() + action.method.toString() + title.toString() + request.name.toString() + request.headers.toString() + request.body.toString() + request.schema.toString() + Math.random())
    - var content = request.description || Object.keys(request.headers).length || request.body || request.schema
    - var type = title.toLowerCase()

    div(class=type)
        if request.name
            div.response-code(class='response-code-' + request.name.substr(0, 1) + 'xx')
                = request.name
                - var text = ''
                case request.name
                    when '200'
                        - var text = 'OK'
                    when '201'
                        - var text = 'Created'
                    when '304'
                        - var text = 'Not Modified'
                    when '400'
                        - var text = 'Bad Request'
                    when '401'
                        - var text = 'Unauthorized'
                    when '404'
                        - var text = 'Not Found'
                    when '405'
                        - var text = 'Method Not Allowed'
                    when '422'
                        - var text = 'Unprocessable Entity'
                if(text.length > 0)
                    = ' ' + text
            - var status = false
            each h in request.headers
                if ( h.name == 'Status' )
                    - status = true
            if (status == false)
                - request.headers.unshift({ name : 'Status', value : request.name + ' ' + text });
        if content && type == 'response'
            a.collapsed.response-show.btn.btn-sm.btn-default(data-toggle="collapse", data-target="##{id}")
                span.closed Show
                span.open Hide

        if content
            - var cl = type + '-content'
            - if (type == 'request') cl += ' in'
            div.collapse(id=id,class=cl)
                if request.description
                    .description!= markdown(request.description)

                ul.nav.nav-pills(role="tablist")
                    if Object.keys(request.headers).length
                        li(role="presentation")
                            a(href="#" + id + "-headers", role="tab", data-toggle="tab")= 'Headers'
                    if request.body
                        li(role="presentation")
                            a(href="#" + id + "-body", role="tab", data-toggle="tab")= 'Body'
                    if request.schemaStructure
                        li.active(role="presentation")
                            a(href="#" + id + "-structure", role="tab", data-toggle="tab")= 'Structure'

                .tab-content
                    if Object.keys(request.headers).length
                        .tab-pane(role="tabpanel",id=id + "-headers")
                            pre
                                code
                                    each item in request.headers
                                        != highlight(item.name + ': ' + item.value, 'http')
                                        br
                    if request.body
                        .tab-pane(role="tabpanel",id=id + "-body")
                            div.body
                                pre
                                    code!= highlight(request.body)

                    if request.schemaStructure
                        .tab-pane.active(role="tabpanel",id=id + "-structure")
                            div.schema-structure
                                if request.schemaStructure.properties
                                    if request.schemaStructure.type == 'enum'
                                        div.schema-structure-array= 'One of following values is possible'
                                    table.table-schema.table.table-striped.table-hover
                                        +SchemaTable(request.schemaStructure.properties, id + '-substructure-')
                                else if request.schemaStructure.items.properties
                                    if request.schemaStructure.type == 'array'
                                        div.schema-structure-array
                                            = 'Array of '
                                            +ItemType(id + "-substructure-", request.schemaStructure.items)
                            if request.subStructures
                                h4 Sub structures
                                div.schema-substructure
                                    - var keys = Object.keys(request.subStructures)
                                    - keys.sort()
                                    table.table-schema.table.table-striped.table-hover.table-bordered
                                        for name in keys
                                            - subId = name.replace(/\s+/g, '')
                                            thead
                                                tr
                                                    th.schema-substructure-title(colspan=8,id=id + '-substructure-' + subId)= name
                                            +SchemaSubTable(request.subStructures[ name ], id + '-substructure-')
                                    for name in keys
                                        - subId = name.replace(/\s+/g, '')
                                        +SchemaPopupTable(request.subStructures[ name ], id + '-substructure-' + subId + '-popup')

mixin Examples(resourceGroup, resource, action)
    each example in action.examples
        each request in example.requests
            +RequestResponse('Request', request, resourceGroup, resource, action)
        each response in example.responses
            +RequestResponse('Response', response, resourceGroup, resource, action)

mixin ResourceGroup(resourceGroup, getButtonClass)
    .resource-group
        h1(id="#{slug(resourceGroup.name)}").resource-group-heading
            span
                = resourceGroup.name || 'Resource Group'
            | &nbsp;
            a(href="#{slug(resourceGroup.name)}").resource-group-anchor
                i.fa.fa-link
        .resource-group-body
            if resourceGroup.description
                != markdown(resourceGroup.description)
            each resource in resourceGroup.resources
                h2(id="#{slug(resourceGroup.name)}-#{slug(resource.name)}").resource-heading
                    span
                        = resource.name || 'Resources'
                    | &nbsp;
                    a(href="#{slug(resourceGroup.name)}-#{slug(resource.name)}").resource-group-anchor
                        i.fa.fa-link
                if resource.description
                    != markdown(resource.description)
                each action in resource.actions
                    case action.method
                        when 'POST': - var actionClass = 'success'
                        when 'GET': - var actionClass = 'info'
                        when 'PUT': - var actionClass = 'warning'
                        when 'PATCH': - var actionClass = 'warning'
                        when 'DELETE': - var actionClass = 'danger'
                        default: - var actionClass = 'default'
                    section.resource-body(id="#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")
                        .action-heading(class=actionClass)
                            case action.method
                                when 'POST': - var typeClass = 'pattern-type-post'
                                when 'GET': - var typeClass = 'pattern-type-get'
                                when 'PUT': - var typeClass = 'pattern-type-put'
                                when 'PATCH': - var typeClass = 'pattern-type-patch'
                                when 'DELETE': - var typeClass = 'pattern-type-delete'
                                default: - var typeClass = 'pattern-type-default'
                            .action-pattern
                                a.pattern-type(class=typeClass, href="##{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")= action.method
                                .pattern-code= decodeURI(resource.uriTemplate)

                            if action.description
                                .action-description
                                    .description-text= action.description.replace('[HOST]', host)
                                    .description-label= 'Example'

                        - var params = action.parameters.length ? action.parameters : resource.parameters
                        if params.length
                            .action-parameters
                                h3= 'Parameters'
                                +Parameters(params)
                        if action.examples
                            .action-examples
                                h3= 'Examples'
                                each example in action.examples
                                    - var hasRequests = (example.requests.length > 0 )
                                    - var hasResponses = (example.responses.length > 0 )
                                    .action-example
                                        if hasRequests
                                            h4= 'Requests'
                                            each request in example.requests
                                                +RequestResponse('Request', request, resourceGroup, resource, action)
                                        if hasResponses
                                            h4= 'Responses'
                                            each response in example.responses
                                                +RequestResponse('Response', response, resourceGroup, resource, action)

mixin Icon(method)
    case method
        when 'GET'
            span.badge.alert-info
                i.fa.fa-arrow-down
        when 'POST'
            span.badge.alert-success
                i.fa.fa-plus
        when 'PUT'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'PATCH'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'DELETE'
            span.badge.alert-danger
                i.fa.fa-times
        default
            span.badge
                i.fa.fa-dot-circle-o

mixin Content(getButtonClass)
    .introduction
        h1= 'Introduction'
        div.description!= markdown(api.description)

    each resourceGroup, index in api.resourceGroups
        if (resourceGroup.name.search('Hidden') == -1)
            +ResourceGroup(resourceGroup, getButtonClass)
